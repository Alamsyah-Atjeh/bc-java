
jar.archiveBaseName = "bcmail-$vmrange"

sourceSets {
    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }

    test11 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/java"))
        }
    }
}

dependencies {
    implementation project(':prov')
    implementation project(':util')
    implementation project(':pkix')

    implementation group: 'javax.mail', name: 'mail', version: '1.4'
    implementation files("$bc_prov")
    implementation files("$bc_util")
    implementation files("$bc_pkix")
    implementation project(path: ':core')

    java9Implementation group: 'javax.mail', name: 'mail', version: '1.4'
    java9Implementation files("$bc_prov")
    java9Implementation files("$bc_util")
    java9Implementation files("$bc_pkix")
    java9Implementation files(sourceSets.main.output.classesDirs) {
        builtBy compileJava
    }

    test11Implementation group: 'javax.mail', name: 'mail', version: '1.4'
    test11Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test11Implementation(project(":core"))
    test11Implementation files("$bc_prov")
    test11Implementation files("$bc_util")
    test11Implementation files("$bc_pkix")

}

compileJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    targetCompatibility = 1.8;
    sourceCompatibility = 1.8;
}


compileJava9Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 9
    targetCompatibility = 9
    options.compilerArgs += [
            '--module-path', "${bc_prov}:${bc_util}:${bc_pkix}"
    ]

    options.sourcepath = files(['src/main/java', 'src/main/jdk1.9'])
}


jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8')
    manifest.attributes('Export-Package': 'org.bouncycastle.*')
    manifest.attributes('Import-Package': 'java.*;resolution:=optional;javax.*;resolution:=optional;org.bouncycastle.*;version="[2.73,4)"')
}

task sourcesJar(type: Jar) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveBaseName = jar.archiveBaseName
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

test {
    forkEvery = 1;
    maxParallelForks = 8;
}




task test11(type: Test) {

    dependsOn(jar)

    testClassesDirs = sourceSets.test11.output.classesDirs
    classpath = sourceSets.test11.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    jvmArgs = ['-Dtest.java.version.prefix=11.']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        includeTestsMatching "All11Test*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}


task test17(type: Test) {

    dependsOn(jar)

    testClassesDirs = sourceSets.test11.output.classesDirs
    classpath = sourceSets.test11.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    jvmArgs = ['-Dtest.java.version.prefix=17.']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        includeTestsMatching "All11Test*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}


task test21(type: Test) {

    dependsOn(jar)

    testClassesDirs = sourceSets.test11.output.classesDirs
    classpath = sourceSets.test11.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }

    jvmArgs = ['-Dtest.java.version.prefix=21']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        includeTestsMatching "All11Test*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}